{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let CrearComponent = class CrearComponent {\n  //injectamos en el constructor \n  constructor(fb, service, serviceAuth, route, servicioNotificaciones) {\n    this.fb = fb;\n    this.service = service;\n    this.serviceAuth = serviceAuth;\n    this.route = route;\n    this.servicioNotificaciones = servicioNotificaciones;\n    this.formularioEnviado = false;\n    this.user = {\n      name: '',\n      email: '',\n      password: ''\n    };\n    this.rutina = {\n      rutina: '',\n      user: this.user\n    };\n    this.miFormulario = this.fb.group({\n      rutina: [this.rutina.rutina, [Validators.required]],\n      user: [this.rutina.user]\n    });\n    this.alerta = {\n      title: 'Rutina Creada',\n      text: 'La rutina ha sido creada correctamente',\n      type: 'success',\n      duration: 3000\n    };\n  }\n  ngOnInit() {\n    if (this.serviceAuth.currentUser) {\n      this.user = this.serviceAuth.currentUser;\n      this.miFormulario.patchValue({\n        user: this.user\n      });\n      console.log(this.miFormulario.value);\n    }\n  }\n  validacion(arg) {\n    return this.miFormulario.controls[`${arg}`].hasError('required') && this.miFormulario.controls[`${arg}`].touched;\n  }\n  enviar() {\n    //archivo.ts\n    this.formularioEnviado = true;\n    console.log(\"Enviar\");\n    if (this.miFormulario.invalid) {\n      //va campo por campo y toca todo el formulario\n      this.miFormulario.markAllAsTouched();\n      return;\n    }\n    //Si es correcto el formulario\n    this.service.crearRutina(this.miFormulario.value).subscribe(response => {\n      console.log(this.miFormulario.value);\n      this.route.navigate(['/auth/listado-rutina']);\n      this.servicioNotificaciones.success('Rutina Creada', \"La rutina ha sido creada correctamente\", {\n        timeOut: 3000\n      });\n    }, error => {\n      console.log(\"Respuesta erronea: \" + error);\n    });\n  }\n};\nCrearComponent = __decorate([Component({\n  selector: 'app-crear',\n  templateUrl: './crear.component.html',\n  styleUrls: ['./crear.component.css']\n})], CrearComponent);","map":{"version":3,"names":["Component","Validators","CrearComponent","constructor","fb","service","serviceAuth","route","servicioNotificaciones","formularioEnviado","user","name","email","password","rutina","miFormulario","group","required","alerta","title","text","type","duration","ngOnInit","currentUser","patchValue","console","log","value","validacion","arg","controls","hasError","touched","enviar","invalid","markAllAsTouched","crearRutina","subscribe","response","navigate","success","timeOut","error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Nitropc\\Desktop\\TareaFinalSpringboot\\fronted\\src\\app\\auth\\page\\rutina\\crear\\crear.component.ts"],"sourcesContent":["import { AuthService } from 'src/app/auth/services/auth.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { User } from 'src/app/auth/interfaces/user';\r\nimport { Rutina } from 'src/app/interfaces/rutina';\r\nimport { CrudRutinaService } from 'src/app/service/crudRutina.service';\r\nimport { NotificationsService } from 'angular2-notifications';\r\n\r\n@Component({\r\n  selector: 'app-crear',\r\n  templateUrl: './crear.component.html',\r\n  styleUrls: ['./crear.component.css']\r\n})\r\nexport class CrearComponent implements OnInit {\r\n  public miFormulario: FormGroup;\r\n\r\n  public alerta;\r\n\r\n  formularioEnviado = false;\r\n\r\n  private user: User = {\r\n    name: '',\r\n    email: '',\r\n    password: ''\r\n  }\r\n\r\n  private rutina: Rutina = {\r\n    rutina: '',\r\n    user: this.user\r\n  }\r\n\r\n  //injectamos en el constructor \r\n  constructor(\r\n    private fb: FormBuilder, private service: CrudRutinaService, \r\n    private serviceAuth: AuthService, \r\n    private route: Router,\r\n    private servicioNotificaciones: NotificationsService ) { \r\n    this.miFormulario = this.fb.group({\r\n      rutina: [this.rutina.rutina, [Validators.required]],\r\n      user: [this.rutina.user]\r\n    });\r\n\r\n    this.alerta = {\r\n      title: 'Rutina Creada',\r\n      text: 'La rutina ha sido creada correctamente',\r\n      type: 'success',\r\n      duration: 3000\r\n    };\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if(this.serviceAuth.currentUser){\r\n      this.user = this.serviceAuth.currentUser;\r\n      this.miFormulario.patchValue({\r\n        user: this.user\r\n      });\r\n\r\n      console.log(this.miFormulario.value);\r\n    }\r\n  }\r\n\r\n\r\n  validacion(arg:string){\r\n    return this.miFormulario.controls[`${arg}`].hasError('required') && this.miFormulario.controls[`${arg}`].touched;\r\n  }\r\n\r\n  enviar(){\r\n    //archivo.ts\r\n    this.formularioEnviado = true;\r\n    console.log(\"Enviar\");\r\n    if(this.miFormulario.invalid){\r\n      //va campo por campo y toca todo el formulario\r\n      this.miFormulario.markAllAsTouched();\r\n      return;\r\n\r\n    }\r\n\r\n    //Si es correcto el formulario\r\n    this.service.crearRutina(this.miFormulario.value).subscribe(response => {\r\n      console.log(this.miFormulario.value);\r\n      this.route.navigate(['/auth/listado-rutina']);\r\n      this.servicioNotificaciones.success('Rutina Creada', \"La rutina ha sido creada correctamente\",{\r\n        timeOut: 3000,\r\n      })\r\n      \r\n    },\r\n    (error) => {\r\n      console.log(\"Respuesta erronea: \" +  error);\r\n    });\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}