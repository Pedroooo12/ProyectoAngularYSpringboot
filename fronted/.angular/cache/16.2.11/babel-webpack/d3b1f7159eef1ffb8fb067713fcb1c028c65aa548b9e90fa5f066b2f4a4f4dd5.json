{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.ApiURL = \"http://localhost:9000/api/auth\";\n  }\n  registrarse(user) {\n    return this.http.post(this.ApiURL, user);\n  }\n  logearse(user) {\n    this.http.post(this.ApiURL, user).subscribe(user => {\n      //cogemos el usuario\n      this.user = user;\n      //lo metemos al localStorage\n      localStorage.setItem('token', user.id.toString());\n    }, error => {\n      console.log(error);\n    });\n  }\n  get currentUser() {\n    if (!this.user) {\n      return undefined;\n    }\n    //Devuelve una copia profunda del usuario para que no se alterar\n    return structuredClone(this.user);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","http","ApiURL","registrarse","user","post","logearse","subscribe","localStorage","setItem","id","toString","error","console","log","currentUser","undefined","structuredClone","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Nitropc\\Desktop\\TareaFinalSpringboot\\fronted\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User } from '../interfaces/user';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AuthService {\r\n\r\n    private ApiURL = \"http://localhost:9000/api/auth\";\r\n    private user?: User;\r\n    constructor(private http: HttpClient) { }\r\n\r\n    registrarse(user: User): Observable<User>{\r\n        return this.http.post<User>(this.ApiURL, user);\r\n    }\r\n\r\n    logearse(user: User): Observable<User>{\r\n\r\n        this.http.post<User>(this.ApiURL, user).subscribe(user => {\r\n            //cogemos el usuario\r\n            this.user = user;\r\n            //lo metemos al localStorage\r\n            localStorage.setItem('token', user.id!.toString());\r\n\r\n        },(error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    get currentUser(): User | undefined{\r\n        if(!this.user){\r\n            return undefined;\r\n        }\r\n\r\n        //Devuelve una copia profunda del usuario para que no se alterar\r\n        return structuredClone (this.user) as User; \r\n    }\r\n    \r\n}"],"mappings":";;AAMA,OAAM,MAAOA,WAAW;EAIpBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,gCAAgC;EAET;EAExCC,WAAWA,CAACC,IAAU;IAClB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAO,IAAI,CAACH,MAAM,EAAEE,IAAI,CAAC;EAClD;EAEAE,QAAQA,CAACF,IAAU;IAEf,IAAI,CAACH,IAAI,CAACI,IAAI,CAAO,IAAI,CAACH,MAAM,EAAEE,IAAI,CAAC,CAACG,SAAS,CAACH,IAAI,IAAG;MACrD;MACA,IAAI,CAACA,IAAI,GAAGA,IAAI;MAChB;MACAI,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,IAAI,CAACM,EAAG,CAACC,QAAQ,EAAE,CAAC;IAEtD,CAAC,EAAEC,KAAK,IAAI;MACRC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACtB,CAAC,CAAC;EACN;EAEA,IAAIG,WAAWA,CAAA;IACX,IAAG,CAAC,IAAI,CAACX,IAAI,EAAC;MACV,OAAOY,SAAS;;IAGpB;IACA,OAAOC,eAAe,CAAE,IAAI,CAACb,IAAI,CAAS;EAC9C;EAAC,QAAAc,CAAA,G;qBA9BQnB,WAAW,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXxB,WAAW;IAAAyB,OAAA,EAAXzB,WAAW,CAAA0B,IAAA;IAAAC,UAAA,EADC;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}