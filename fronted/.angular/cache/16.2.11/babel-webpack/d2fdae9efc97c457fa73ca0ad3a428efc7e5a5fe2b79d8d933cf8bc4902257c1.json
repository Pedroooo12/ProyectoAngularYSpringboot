{"ast":null,"code":"import { of, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.ApiURL = \"http://localhost:9000/api/auth\";\n  }\n  registrarse(user) {\n    return this.http.post(this.ApiURL, user);\n  }\n  logearse(user) {\n    return this.http.post(`${this.ApiURL}/login`, user).pipe(tap(user => {\n      this.user = user;\n      console.log(this.user);\n    }));\n  }\n  get currentUser() {\n    if (!this.user) {\n      return undefined;\n    }\n    //Devuelve una copia profunda del usuario para que no se alterar\n    return structuredClone(this.user);\n  }\n  //true si esta autenticado y false sino\n  checkAuthentication() {\n    if (!localStorage.getItem('token')) {\n      //ponemos of porque es un observable\n      return false;\n    }\n    const token = localStorage.getItem('token');\n    return of(true);\n  }\n  logOut() {\n    this.user = undefined;\n    localStorage.clear();\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["of","tap","AuthService","constructor","http","ApiURL","registrarse","user","post","logearse","pipe","console","log","currentUser","undefined","structuredClone","checkAuthentication","localStorage","getItem","token","logOut","clear","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Nitropc\\Desktop\\TareaFinalSpringboot\\fronted\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { Observable, of, tap } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User } from '../interfaces/user';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AuthService {\r\n\r\n    private ApiURL = \"http://localhost:9000/api/auth\";\r\n    private user?: User;\r\n    constructor(private http: HttpClient) { }\r\n\r\n    registrarse(user: User): Observable<User>{\r\n        return this.http.post<User>(this.ApiURL, user);\r\n    }\r\n\r\n    logearse(user: User): Observable<User>{\r\n\r\n       return this.http.post<User>(`${this.ApiURL}/login`, user).pipe(\r\n        tap(user => {\r\n            this.user = user; \r\n            console.log(this.user)})\r\n       );\r\n    }\r\n\r\n    get currentUser(): User | undefined{\r\n        if(!this.user){\r\n            return undefined;\r\n        }\r\n\r\n        //Devuelve una copia profunda del usuario para que no se alterar\r\n        return structuredClone (this.user); \r\n    }\r\n\r\n    //true si esta autenticado y false sino\r\n    checkAuthentication(): Observable<boolean> | boolean{\r\n        if(!localStorage.getItem('token')){\r\n            //ponemos of porque es un observable\r\n            return false;\r\n        }\r\n        const token = localStorage.getItem('token');\r\n        return of(true);\r\n    }\r\n\r\n    logOut(){\r\n        this.user = undefined;\r\n        localStorage.clear();\r\n    }\r\n    \r\n}"],"mappings":"AAAA,SAAqBA,EAAE,EAAEC,GAAG,QAAQ,MAAM;;;AAM1C,OAAM,MAAOC,WAAW;EAIpBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,gCAAgC;EAET;EAExCC,WAAWA,CAACC,IAAU;IAClB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAO,IAAI,CAACH,MAAM,EAAEE,IAAI,CAAC;EAClD;EAEAE,QAAQA,CAACF,IAAU;IAEhB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAO,GAAG,IAAI,CAACH,MAAM,QAAQ,EAAEE,IAAI,CAAC,CAACG,IAAI,CAC7DT,GAAG,CAACM,IAAI,IAAG;MACP,IAAI,CAACA,IAAI,GAAGA,IAAI;MAChBI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,IAAI,CAAC;IAAA,CAAC,CAAC,CAC5B;EACJ;EAEA,IAAIM,WAAWA,CAAA;IACX,IAAG,CAAC,IAAI,CAACN,IAAI,EAAC;MACV,OAAOO,SAAS;;IAGpB;IACA,OAAOC,eAAe,CAAE,IAAI,CAACR,IAAI,CAAC;EACtC;EAEA;EACAS,mBAAmBA,CAAA;IACf,IAAG,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAC;MAC9B;MACA,OAAO,KAAK;;IAEhB,MAAMC,KAAK,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOlB,EAAE,CAAC,IAAI,CAAC;EACnB;EAEAoB,MAAMA,CAAA;IACF,IAAI,CAACb,IAAI,GAAGO,SAAS;IACrBG,YAAY,CAACI,KAAK,EAAE;EACxB;EAAC,QAAAC,CAAA,G;qBAzCQpB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXzB,WAAW;IAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;IAAAC,UAAA,EADC;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}