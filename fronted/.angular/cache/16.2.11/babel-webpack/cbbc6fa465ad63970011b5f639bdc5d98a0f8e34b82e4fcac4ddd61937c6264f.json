{"ast":null,"code":"import { inject } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\nimport { Router } from '@angular/router';\nimport { tap } from 'rxjs';\nconst checkAuthStatus = () => {\n  //se inyectan el AuthService y el Router\n  const authService = inject(AuthService);\n  const router = inject(Router);\n  return authService.checkAuthentication().pipe(tap(isAuthenticated => {\n    if (!isAuthenticated) {\n      router.navigate(['/login']);\n    }\n  }));\n};\n//Indica si el usuario tiene permisos o no\nexport const canActivateGuard = (route, state) => {\n  return checkAuthStatus();\n};\n//Protege que no pueda cargar los componentes ya que esta en forma perezosa\nexport const canMatchGuard = (\n//Tipado CanMatchFN\nroute, segments) => {\n  return checkAuthStatus();\n};","map":{"version":3,"names":["inject","AuthService","Router","tap","checkAuthStatus","authService","router","checkAuthentication","pipe","isAuthenticated","navigate","canActivateGuard","route","state","canMatchGuard","segments"],"sources":["C:\\Users\\Nitropc\\Desktop\\TareaFinalSpringboot\\fronted\\src\\app\\auth\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { ActivatedRouteSnapshot, CanActivateFn, CanMatchFn, Route, Router, RouterStateSnapshot, UrlSegment } from '@angular/router';\r\nimport { Observable, tap } from 'rxjs';\r\n\r\n    const checkAuthStatus = (): boolean | Observable<boolean> => {\r\n        //se inyectan el AuthService y el Router\r\n        const authService: AuthService = inject(AuthService);\r\n        const router: Router = inject(Router);\r\n       \r\n        return authService.checkAuthentication().pipe(\r\n          tap((isAuthenticated) => {\r\n            if (!isAuthenticated) {\r\n              router.navigate(['/login']);\r\n            }\r\n          })\r\n        );\r\n      };\r\n       \r\n      //Indica si el usuario tiene permisos o no\r\n      export const canActivateGuard: CanActivateFn = (\r\n        route: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot\r\n      ) => {\r\n       \r\n        return checkAuthStatus();\r\n      };\r\n       \r\n      //Protege que no pueda cargar los componentes ya que esta en forma perezosa\r\n      export const canMatchGuard: CanMatchFn = (\r\n        //Tipado CanMatchFN\r\n        route: Route,\r\n        segments: UrlSegment[]\r\n      ) => {\r\n\r\n       \r\n        return checkAuthStatus();\r\n      };"],"mappings":"AAAA,SAAqBA,MAAM,QAAQ,eAAe;AAClD,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAAmEC,MAAM,QAAyC,iBAAiB;AACnI,SAAqBC,GAAG,QAAQ,MAAM;AAElC,MAAMC,eAAe,GAAGA,CAAA,KAAoC;EACxD;EACA,MAAMC,WAAW,GAAgBL,MAAM,CAACC,WAAW,CAAC;EACpD,MAAMK,MAAM,GAAWN,MAAM,CAACE,MAAM,CAAC;EAErC,OAAOG,WAAW,CAACE,mBAAmB,EAAE,CAACC,IAAI,CAC3CL,GAAG,CAAEM,eAAe,IAAI;IACtB,IAAI,CAACA,eAAe,EAAE;MACpBH,MAAM,CAACI,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAE/B,CAAC,CAAC,CACH;AACH,CAAC;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAkBA,CAC7CC,KAA6B,EAC7BC,KAA0B,KACxB;EAEF,OAAOT,eAAe,EAAE;AAC1B,CAAC;AAED;AACA,OAAO,MAAMU,aAAa,GAAeA;AACvC;AACAF,KAAY,EACZG,QAAsB,KACpB;EAGF,OAAOX,eAAe,EAAE;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}